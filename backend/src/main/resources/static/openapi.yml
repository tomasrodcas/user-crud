openapi: 3.0.3
info:
  title: User Management API
  description: API for managing users with full CRUD functionality.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /api/users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - Users
      responses:
        "200":
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"

    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDTO"
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the user
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Update an existing user
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the user to update
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated user details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequestDTO"
      responses:
        "200":
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
        "400":
          description: Validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the user to delete
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: User successfully deleted (No Content)
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        nationalId:
          type: integer
          format: int64
          example: 12345678
        verificationDigit:
          type: string
          example: "K"
        birthDate:
          type: string
          format: date
          example: "1990-01-01"
        email:
          type: string
          format: email
          example: "john.doe@example.com"

    UserRequestDTO:
      type: object
      required:
        - firstName
        - lastName
        - nationalId
        - verificationDigit
        - birthDate
        - email
        - password
      properties:
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        nationalId:
          type: integer
          format: int64
          example: 12345678
        verificationDigit:
          type: string
          example: "K"
        birthDate:
          type: string
          format: date
          example: "1990-01-01"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          example: "securepass"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "User not found"
